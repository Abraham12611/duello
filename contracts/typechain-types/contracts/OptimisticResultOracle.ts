/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OptimisticResultOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dispute"
      | "disputeWindow"
      | "finalize"
      | "getResult"
      | "owner"
      | "proposals"
      | "propose"
      | "renounceOwnership"
      | "setDisputeWindow"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Disputed"
      | "Finalized"
      | "OwnershipTransferred"
      | "Proposed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "dispute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "disputeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finalize", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getResult",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "dispute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DisputedEvent {
  export type InputTuple = [eventId: BytesLike];
  export type OutputTuple = [eventId: string];
  export interface OutputObject {
    eventId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizedEvent {
  export type InputTuple = [eventId: BytesLike, result: BigNumberish];
  export type OutputTuple = [eventId: string, result: bigint];
  export interface OutputObject {
    eventId: string;
    result: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposedEvent {
  export type InputTuple = [
    eventId: BytesLike,
    result: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    eventId: string,
    result: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    eventId: string;
    result: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OptimisticResultOracle extends BaseContract {
  connect(runner?: ContractRunner | null): OptimisticResultOracle;
  waitForDeployment(): Promise<this>;

  interface: OptimisticResultOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dispute: TypedContractMethod<[eventId: BytesLike], [void], "nonpayable">;

  disputeWindow: TypedContractMethod<[], [bigint], "view">;

  finalize: TypedContractMethod<[eventId: BytesLike], [void], "nonpayable">;

  getResult: TypedContractMethod<
    [eventId: BytesLike],
    [[bigint, boolean]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proposals: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, boolean, boolean] & {
        result: bigint;
        timestamp: bigint;
        disputed: boolean;
        finalized: boolean;
      }
    ],
    "view"
  >;

  propose: TypedContractMethod<
    [eventId: BytesLike, result: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDisputeWindow: TypedContractMethod<
    [w: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dispute"
  ): TypedContractMethod<[eventId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disputeWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[eventId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getResult"
  ): TypedContractMethod<[eventId: BytesLike], [[bigint, boolean]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, boolean, boolean] & {
        result: bigint;
        timestamp: bigint;
        disputed: boolean;
        finalized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [eventId: BytesLike, result: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDisputeWindow"
  ): TypedContractMethod<[w: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Disputed"
  ): TypedContractEvent<
    DisputedEvent.InputTuple,
    DisputedEvent.OutputTuple,
    DisputedEvent.OutputObject
  >;
  getEvent(
    key: "Finalized"
  ): TypedContractEvent<
    FinalizedEvent.InputTuple,
    FinalizedEvent.OutputTuple,
    FinalizedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Proposed"
  ): TypedContractEvent<
    ProposedEvent.InputTuple,
    ProposedEvent.OutputTuple,
    ProposedEvent.OutputObject
  >;

  filters: {
    "Disputed(bytes32)": TypedContractEvent<
      DisputedEvent.InputTuple,
      DisputedEvent.OutputTuple,
      DisputedEvent.OutputObject
    >;
    Disputed: TypedContractEvent<
      DisputedEvent.InputTuple,
      DisputedEvent.OutputTuple,
      DisputedEvent.OutputObject
    >;

    "Finalized(bytes32,uint8)": TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;
    Finalized: TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Proposed(bytes32,uint8,uint256)": TypedContractEvent<
      ProposedEvent.InputTuple,
      ProposedEvent.OutputTuple,
      ProposedEvent.OutputObject
    >;
    Proposed: TypedContractEvent<
      ProposedEvent.InputTuple,
      ProposedEvent.OutputTuple,
      ProposedEvent.OutputObject
    >;
  };
}
